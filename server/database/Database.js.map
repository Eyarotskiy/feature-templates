{"version":3,"file":"Database.js","sourceRoot":"","sources":["Database.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose, {Document} from 'mongoose';\r\nimport { model } from './model';\r\nimport { MONGO_URI } from '../common/constants';\r\n\r\nclass Database {\r\n\tprivate readonly menuModel = model.menu;\r\n\tprivate readonly usersModel = model.users;\r\n\r\n\tasync connect(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait mongoose.connect(MONGO_URI, {\r\n\t\t\t\tuseNewUrlParser: true,\r\n\t\t\t\tuseUnifiedTopology: true,\r\n\t\t\t\tuseFindAndModify: false,\r\n\t\t\t});\r\n\t\t\tconsole.log('Connection to database established!');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Connection to database failed! Error log:');\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\tasync saveDish(dishName: string): Promise<object|null> {\r\n\t\ttry {\r\n\t\t\tconst menuModel: any = new model.menu();\r\n\t\t\tmenuModel.name = dishName;\r\n\r\n\t\t\treturn await menuModel.save();\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateDish(oldDishName: string, newDishName: string): Promise<Document|null> {\r\n\t\ttry {\r\n\t\t\tconst filter = {name: oldDishName};\r\n\t\t\tconst update = {$set: {name: newDishName}};\r\n\r\n\t\t\treturn await this.menuModel.findOneAndUpdate(\r\n\t\t\t\tfilter, update, {new: true});\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync deleteDish(dishName: string): Promise<Document|null> {\r\n\t\ttry {\r\n\t\t\tconst filter = {name: dishName};\r\n\r\n\t\t\treturn await this.menuModel.findOneAndRemove(filter);\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync clearMenu(): Promise<any> {\r\n\t\ttry {\r\n\t\t\treturn await this.menuModel.deleteMany({});\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync getMenu(): Promise<Document[]> {\r\n\t\ttry {\r\n\t\t\treturn await this.menuModel.find();\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync saveUser(login: string, password: string): Promise<Document[]> {\r\n\t\ttry {\r\n\t\t\tconst usersModel: any = new model.users();\r\n\t\t\tusersModel.login = login;\r\n\t\t\tusersModel.password = password;\r\n\r\n\t\t\treturn await usersModel.save();\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync getUsers(): Promise<any> {\r\n\t\ttry {\r\n\t\t\treturn await this.usersModel.find();\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync findUser(login: string): Promise<any> {\r\n\t\ttry {\r\n\t\t\treturn await this.usersModel.findOne({login});\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tasync confirmUser(login: string): Promise<any> {\r\n\t\ttry {\r\n\t\t\tconst filter = {login};\r\n\t\t\tconst update = {$set: {confirmed: true}};\r\n\r\n\t\t\treturn await this.usersModel.findOneAndUpdate(\r\n\t\t\t\tfilter, update, {new: true});\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(e);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default new Database();\r\n"]}