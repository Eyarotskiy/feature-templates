{"version":3,"file":"DataApi.spec.js","sourceRoot":"","sources":["DataApi.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA0B;AAC1B,sDAAgC;AAChC,+CAAyB;AACzB,qEAA+C;AAC/C,4DAGoC;AAEpC,QAAQ,CAAC,SAAS,EAAE;IACnB,UAAU,CAAC;QACV,aAAG,CAAC,WAAW,GAAE,IAAI,CAAC,EAAE,EAAE,CAAC;QAC3B,aAAG,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC1B,kBAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,mCAAmB,CAAC,CAAC,CAAC;QACrE,eAAK,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAC,IAAI,EAAE,kCAAkB,EAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE;QAChC,EAAE,CAAC,iCAAiC,EAAE;;;4BACrC,qBAAM,iBAAO,CAAC,oBAAoB,CAAC,4BAAY,EAAE,6BAAa,CAAC,EAAA;;wBAA/D,SAA+D,CAAC;wBAEhE,MAAM,CAAC,aAAG,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,6BAAa,EAAE,kCAAkB,CAAC,CAAC;;;;aAChF,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;;;;wBAClD,eAAK,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC;4BACxC,MAAM,0BAAU,CAAC;wBAClB,CAAC,CAAC,CAAC;wBAEH,qBAAM,iBAAO,CAAC,oBAAoB,CAAC,4BAAY,EAAE,6BAAa,CAAC,EAAA;;wBAA/D,SAA+D,CAAC;wBAEhE,MAAM,CAAC,aAAG,CAAC,SAAS,CAAC;6BACnB,oBAAoB,CAAC,6BAAa,EAAE,GAAG,EAAE,0BAAU,CAAC,CAAC;;;;aACvD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE;QACjC,EAAE,CAAC,iCAAiC,EAAE;;;4BACrC,qBAAM,iBAAO,CAAC,qBAAqB,CAAC,4BAAY,EAAE,6BAAa,CAAC,EAAA;;wBAAhE,SAAgE,CAAC;wBAEjE,MAAM,CAAC,aAAG,CAAC,WAAW,CAAC;6BACrB,oBAAoB,CAAC,6BAAa,EAAE,EAAC,KAAK,EAAE,CAAC,0BAAU,CAAC,EAAC,CAAC,CAAC;;;;aAC7D,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;;;;wBAClD,kBAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC;4BAChD,MAAM,0BAAU,CAAC;wBAClB,CAAC,CAAC,CAAC;wBAEH,qBAAM,iBAAO,CAAC,qBAAqB,CAAC,4BAAY,EAAE,6BAAa,CAAC,EAAA;;wBAAhE,SAAgE,CAAC;wBAEjE,MAAM,CAAC,aAAG,CAAC,SAAS,CAAC;6BACnB,oBAAoB,CAAC,6BAAa,EAAE,GAAG,EAAE,0BAAU,CAAC,CAAC;;;;aACvD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import axios from 'axios';\r\nimport DataApi from './DataApi';\r\nimport Api from '../Api';\r\nimport Database from '../../database/Database';\r\nimport {\r\n\tTEST_CONFIRMED_USER,\r\n\tTEST_DATA_RESPONSE, TEST_ERROR, TEST_LOGIN, TEST_REQUEST, TEST_RESPONSE\r\n} from '../../common/specConstants';\r\n\r\ndescribe('DataApi', () => {\r\n\tbeforeEach(() => {\r\n\t\tApi.sendSuccess= jest.fn();\r\n\t\tApi.sendError = jest.fn();\r\n\t\tDatabase.getUsers = jest.fn().mockReturnValue([TEST_CONFIRMED_USER]);\r\n\t\taxios.get = jest.fn().mockReturnValue({data: TEST_DATA_RESPONSE});\r\n\t});\r\n\r\n\tdescribe('handleDataGetRequest', () => {\r\n\t\tit('should send successful response', async () => {\r\n\t\t\tawait DataApi.handleDataGetRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess).toHaveBeenCalledWith(TEST_RESPONSE, TEST_DATA_RESPONSE);\r\n\t\t});\r\n\r\n\t\tit('should send error in case of request failure', async () => {\r\n\t\t\taxios.get = jest.fn().mockImplementation(() => {\r\n\t\t\t\tthrow TEST_ERROR;\r\n\t\t\t});\r\n\r\n\t\t\tawait DataApi.handleDataGetRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendError)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, 400, TEST_ERROR);\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('handleUsersGetRequest', () => {\r\n\t\tit('should send successful response', async () => {\r\n\t\t\tawait DataApi.handleUsersGetRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, {users: [TEST_LOGIN]});\r\n\t\t});\r\n\r\n\t\tit('should send error in case of request failure', async () => {\r\n\t\t\tDatabase.getUsers = jest.fn().mockImplementation(() => {\r\n\t\t\t\tthrow TEST_ERROR;\r\n\t\t\t});\r\n\r\n\t\t\tawait DataApi.handleUsersGetRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendError)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, 400, TEST_ERROR);\r\n\t\t});\r\n\t});\r\n});\r\n"]}