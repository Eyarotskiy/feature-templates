{"version":3,"file":"AuthorizationApi.spec.js","sourceRoot":"","sources":["AuthorizationApi.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import AuthorizationApi from './AuthorizationApi';\r\nimport Api from '../Api';\r\nimport {Request} from 'express';\r\nimport Database from '../../database/Database';\r\nimport Email from '../../Email/Email';\r\nimport {\r\n\tTEST_CONFIRMED_USER, TEST_ERROR,\r\n\tTEST_HASH, TEST_LOGIN, TEST_REQUEST, TEST_RESPONSE,\r\n\tTEST_TOKEN, TEST_UNCONFIRMED_USER\r\n} from '../../common/specConstants';\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\n\r\ndescribe('AuthorizationApi', () => {\r\n\tbeforeEach(() => {\r\n\t\tApi.generateToken = jest.fn().mockReturnValue(TEST_TOKEN);\r\n\t\tApi.sendSuccess= jest.fn();\r\n\t\tApi.sendError = jest.fn();\r\n\t\tDatabase.confirmUser = jest.fn();\r\n\t\tDatabase.findUser = jest.fn().mockReturnValue(TEST_CONFIRMED_USER);\r\n\t\tDatabase.saveUser = jest.fn();\r\n\t\tDatabase.getUsers = jest.fn().mockReturnValue([TEST_CONFIRMED_USER]);\r\n\t\tEmail.sendConfirmationEmail = jest.fn();\r\n\t\tbcrypt.compare = jest.fn().mockReturnValue(true);\r\n\t\tbcrypt.hash = jest.fn().mockReturnValue(TEST_HASH);\r\n\t\tjwt.verify = jest.fn().mockReturnValue(true);\r\n\t});\r\n\r\n\tdescribe('handleSignInRequest', () => {\r\n\t\tit('should send success for test account', async () => {\r\n\t\t\tconst TEST_USER_REQUEST = {body: {login: 'test@test.com'}} as Request;\r\n\t\t\tawait AuthorizationApi.handleSignInRequest(\r\n\t\t\t\tTEST_USER_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.generateToken).toHaveBeenCalled();\r\n\t\t\texpect(Api.sendSuccess).toHaveBeenCalledWith(\r\n\t\t\t\tTEST_RESPONSE, {token: TEST_TOKEN});\r\n\t\t});\r\n\r\n\t\tit('should send error for non-existent user', async () => {\r\n\t\t\tDatabase.findUser = jest.fn().mockReturnValue(undefined);\r\n\r\n\t\t\tawait AuthorizationApi.handleSignInRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess).not.toHaveBeenCalled();\r\n\t\t\texpect(Api.sendError).toHaveBeenCalledWith(\r\n\t\t\t\tTEST_RESPONSE, 404, {message: 'Such user does not exist'});\r\n\t\t});\r\n\r\n\t\tit('should send error for incorrect password', async () => {\r\n\t\t\tbcrypt.compare = jest.fn().mockReturnValue(false);\r\n\r\n\t\t\tawait AuthorizationApi.handleSignInRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess).not.toHaveBeenCalled();\r\n\t\t\texpect(Api.sendError).toHaveBeenCalledWith(\r\n\t\t\t\tTEST_RESPONSE, 401, {message: 'Password is not correct'});\r\n\t\t});\r\n\r\n\t\tit('should send error for unconfirmed email', async () => {\r\n\t\t\tDatabase.findUser = jest.fn().mockReturnValue(TEST_UNCONFIRMED_USER);\r\n\r\n\t\t\tawait AuthorizationApi.handleSignInRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess).not.toHaveBeenCalled();\r\n\t\t\texpect(Api.sendError).toHaveBeenCalledWith(\r\n\t\t\t\tTEST_RESPONSE, 403, {message: 'Email is not confirmed'});\r\n\t\t});\r\n\r\n\t\tit('should send error in case of request failure', async () => {\r\n\t\t\tDatabase.findUser = jest.fn().mockImplementation(() => {\r\n\t\t\t\tthrow TEST_ERROR;\r\n\t\t\t});\r\n\r\n\t\t\tawait AuthorizationApi.handleSignInRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendError)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, 500, TEST_ERROR);\r\n\t\t});\r\n\r\n\t\tit('should send successful response', async () => {\r\n\t\t\tconst TEST_USER_REQUEST = {body: {login: 'test_login'}} as Request;\r\n\t\t\tawait AuthorizationApi.handleSignInRequest(\r\n\t\t\t\tTEST_USER_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess).toHaveBeenCalledWith(\r\n\t\t\t\tTEST_RESPONSE, {token: TEST_TOKEN});\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('handleAuthenticateRequest', () => {\r\n\t\tit('should send successful response', async () => {\r\n\t\t\tawait AuthorizationApi\r\n\t\t\t\t.handleAuthenticateRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess).toHaveBeenCalledWith(TEST_RESPONSE, {\r\n\t\t\t\tlogin: TEST_LOGIN,\r\n\t\t\t\tnewToken: TEST_TOKEN,\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('should send error in case of request failure', async () => {\r\n\t\t\tDatabase.confirmUser = jest.fn().mockImplementation(() => {\r\n\t\t\t\tthrow TEST_ERROR;\r\n\t\t\t});\r\n\r\n\t\t\tawait AuthorizationApi\r\n\t\t\t\t.handleAuthenticateRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendError)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, 500, TEST_ERROR);\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('handleSignUpRequest', () => {\r\n\t\tit('should send error for existing user', async () => {\r\n\t\t\tawait AuthorizationApi.handleSignUpRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendError)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, 403, {message: 'User already exists'});\r\n\t\t});\r\n\r\n\t\tit('should send confirmation email, save user to DB and send successful response',\r\n\t\t\tasync () => {\r\n\t\t\t\tDatabase.findUser = jest.fn().mockReturnValue(undefined);\r\n\r\n\t\t\t\tawait AuthorizationApi.handleSignUpRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\t\texpect(Email.sendConfirmationEmail).toHaveBeenCalledWith(TEST_LOGIN);\r\n\t\t\t\texpect(Database.saveUser).toHaveBeenCalledWith(TEST_LOGIN, TEST_HASH);\r\n\t\t\t\texpect(Api.sendSuccess)\r\n\t\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, {users: [TEST_LOGIN]});\r\n\t\t\t});\r\n\r\n\t\tit('should send error in case of request failure', async () => {\r\n\t\t\tDatabase.findUser = jest.fn().mockImplementation(() => {\r\n\t\t\t\tthrow TEST_ERROR;\r\n\t\t\t});\r\n\r\n\t\t\tawait AuthorizationApi.handleSignUpRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendError)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, 500, TEST_ERROR);\r\n\t\t});\r\n\t});\r\n});\r\n\r\n"]}