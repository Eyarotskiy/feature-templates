{"version":3,"file":"FileApi.spec.js","sourceRoot":"","sources":["FileApi.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAyB;AACzB,0CAAoB;AACpB,8CAAwB;AACxB,4DAGoC;AACpC,sDAAgC;AAEhC,QAAQ,CAAC,SAAS,EAAE;IACnB,UAAU,CAAC;QACV,aAAG,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC5B,aAAG,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC1B,YAAE,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAChD,YAAE,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE;QACnC,EAAE,CAAC,0CAA0C,EAAE;;;;wBAC9C,YAAE,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;wBAEjD,qBAAM,iBAAO,CAAC,uBAAuB,CAAC,4BAAY,EAAE,6BAAa,CAAC,EAAA;;wBAAlE,SAAkE,CAAC;wBAEnE,MAAM,CAAC,YAAE,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;;;;aACxC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE;;;;;wBAC/B,WAAW,GAAM,6BAAa,WAAM,yBAAS,SAAI,8BAAgB,CAAC;wBAExE,qBAAM,iBAAO,CAAC,uBAAuB,CAAC,4BAAY,EAAE,6BAAa,CAAC,EAAA;;wBAAlE,SAAkE,CAAC;wBAEnE,MAAM,CAAC,aAAG,CAAC,WAAW,CAAC;6BACrB,oBAAoB,CAAC,6BAAa,EAAE,EAAC,GAAG,EAAE,WAAW,EAAC,CAAC,CAAC;;;;aAC1D,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;;;;wBAClD,cAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC;4BACxC,MAAM,0BAAU,CAAC;wBAClB,CAAC,CAAC,CAAC;wBAEH,qBAAM,iBAAO,CAAC,uBAAuB,CAAC,4BAAY,EAAE,6BAAa,CAAC,EAAA;;wBAAlE,SAAkE,CAAC;wBAEnE,MAAM,CAAC,aAAG,CAAC,SAAS,CAAC;6BACnB,oBAAoB,CAAC,6BAAa,EAAE,GAAG,EAAE,0BAAU,CAAC,CAAC;;;;aACvD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import Api from '../Api';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport {\r\n\tTEST_ERROR, TEST_FILE_NAME, TEST_HOST, TEST_PROTOCOL,\r\n\tTEST_REQUEST, TEST_RESPONSE\r\n} from '../../common/specConstants';\r\nimport FileApi from './FileApi';\r\n\r\ndescribe('FileApi', () => {\r\n\tbeforeEach(() => {\r\n\t\tApi.sendSuccess = jest.fn();\r\n\t\tApi.sendError = jest.fn();\r\n\t\tfs.existsSync = jest.fn().mockReturnValue(true);\r\n\t\tfs.mkdirSync = jest.fn();\r\n\t});\r\n\r\n\tdescribe('handleFileUploadRequest', () => {\r\n\t\tit(`should create folder if it doesn't exist`, async () => {\r\n\t\t\tfs.existsSync = jest.fn().mockReturnValue(false);\r\n\r\n\t\t\tawait FileApi.handleFileUploadRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(fs.mkdirSync).toHaveBeenCalled();\r\n\t\t});\r\n\r\n\t\tit('should send successful response', async () => {\r\n\t\t\tconst expectedUrl = `${TEST_PROTOCOL}://${TEST_HOST}/${TEST_FILE_NAME}`;\r\n\r\n\t\t\tawait FileApi.handleFileUploadRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendSuccess)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, {url: expectedUrl});\r\n\t\t});\r\n\r\n\t\tit('should send error in case of request failure', async () => {\r\n\t\t\tpath.join = jest.fn().mockImplementation(() => {\r\n\t\t\t\tthrow TEST_ERROR;\r\n\t\t\t});\r\n\r\n\t\t\tawait FileApi.handleFileUploadRequest(TEST_REQUEST, TEST_RESPONSE);\r\n\r\n\t\t\texpect(Api.sendError)\r\n\t\t\t\t.toHaveBeenCalledWith(TEST_RESPONSE, 500, TEST_ERROR);\r\n\t\t});\r\n\t});\r\n});\r\n"]}